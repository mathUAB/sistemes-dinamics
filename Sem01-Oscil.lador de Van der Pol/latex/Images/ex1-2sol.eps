%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, December 6, 2022 2:52:44 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
q
Q
1.50000 w
1.00000 w
q
Q
1.50000 w
q
q
0 1.00000 1.00000 RG
1.00000 4.30598 390.000 381.388 rc
newpath
322.666 191.228 m
322.181 202.511 l
320.979 212.147 l
318.778 222.728 l
315.679 233.057 l
311.744 242.977 l
307.365 251.823 l
302.119 260.605 l
295.966 269.258 l
289.133 277.429 l
281.416 285.337 l
274.076 291.863 l
265.245 298.691 l
255.819 304.962 l
246.255 310.412 l
237.203 314.822 l
226.041 319.347 l
216.297 322.524 l
204.696 325.403 l
194.249 327.166 l
182.667 328.192 l
171.595 328.232 l
160.082 327.246 l
149.621 325.382 l
138.541 322.314 l
127.354 317.952 l
117.962 313.185 l
108.263 307.049 l
98.8111 299.679 l
90.2045 291.526 l
82.5498 282.830 l
74.8985 272.361 l
68.8403 262.336 l
63.2743 251.117 l
59.0682 240.604 l
55.4067 228.856 l
52.8702 217.669 l
51.1674 205.945 l
50.4385 194.546 l
50.6576 182.770 l
51.8027 171.651 l
53.9003 160.569 l
56.8798 149.916 l
60.3820 140.454 l
65.2632 130.029 l
70.3826 121.104 l
76.5893 112.024 l
83.2189 103.772 l
91.3271 95.1312 l
98.9462 88.1109 l
108.221 80.6883 l
117.215 74.4559 l
127.591 68.2577 l
136.953 63.4651 l
148.024 58.6814 l
159.074 54.7963 l
170.403 51.6957 l
181.911 49.4459 l
193.105 48.1329 l
205.282 47.7129 l
216.879 48.3364 l
228.983 50.1250 l
239.767 52.7797 l
251.399 56.8799 l
262.166 61.9565 l
272.448 68.1210 l
282.605 75.6862 l
291.351 83.6086 l
299.630 92.5882 l
307.895 103.401 l
314.522 113.880 l
320.408 125.142 l
325.427 137.022 l
329.156 148.202 l
332.180 160.272 l
334.203 172.293 l
335.290 185.080 l
335.333 196.218 l
334.334 208.814 l
332.489 219.883 l
329.807 230.512 l
326.004 241.542 l
321.264 252.170 l
316.180 261.430 l
310.014 270.820 l
303.270 279.530 l
295.192 288.448 l
287.593 295.710 l
278.213 303.510 l
268.803 310.290 l
258.963 316.444 l
248.642 322.009 l
237.680 327.025 l
225.644 331.555 l
214.292 334.936 l
202.852 337.487 l
190.438 339.279 l
177.944 340.032 l
166.713 339.768 l
153.485 338.241 l
142.563 335.909 l
130.063 331.932 l
118.511 326.867 l
108.594 321.310 l
97.9828 313.931 l
87.9748 305.364 l
78.7774 295.796 l
71.0023 286.101 l
63.7771 275.346 l
57.2444 263.596 l
51.7297 251.397 l
47.1316 238.502 l
44.0027 226.978 l
41.5226 213.947 l
40.1428 200.925 l
39.8565 188.541 l
40.4694 177.507 l
42.2553 164.720 l
44.6420 154.219 l
48.3931 142.428 l
52.5564 132.399 l
57.9974 121.858 l
63.9907 112.285 l
71.0479 102.792 l
78.2152 94.5311 l
86.6426 86.1231 l
96.1152 77.9606 l
104.918 71.3492 l
114.964 64.7524 l
125.882 58.5678 l
137.039 53.1838 l
148.230 48.6535 l
161.043 44.4751 l
172.838 41.5535 l
185.649 39.3819 l
197.381 38.3272 l
210.256 38.2405 l
222.335 39.2383 l
234.829 41.4554 l
246.817 44.8222 l
259.023 49.6382 l
270.341 55.5209 l
281.368 62.7675 l
291.658 71.1223 l
300.466 79.7494 l
309.711 90.6401 l
317.144 101.167 l
324.137 113.064 l
329.883 124.959 l
335.136 138.577 l
338.704 150.579 l
341.637 164.287 l
343.274 176.741 l
343.944 190.201 l
343.594 201.598 l
342.171 214.261 l
339.790 226.114 l
336.455 237.545 l
332.217 248.491 l
327.320 258.573 l
321.155 268.978 l
314.478 278.407 l
306.648 287.808 l
298.888 295.847 l
289.613 304.195 l
280.084 311.645 l
269.995 318.519 l
258.886 325.067 l
248.185 330.487 l
236.812 335.380 l
223.835 339.943 l
211.770 343.243 l
199.194 345.725 l
186.236 347.244 l
174.252 347.676 l
161.483 347.051 l
148.909 345.261 l
135.677 342.002 l
124.281 337.946 l
111.578 331.885 l
100.625 325.167 l
90.3601 317.401 l
80.0538 307.891 l
70.5646 297.251 l
62.7521 286.743 l
55.3771 274.861 l
49.1464 262.699 l
43.5159 249.059 l
39.6128 237.014 l
36.2552 223.059 l
34.1999 209.956 l
33.2101 197.111 l
33.2467 184.479 l
34.3206 171.906 l
36.5704 158.988 l
39.6054 147.562 l
43.4803 136.704 l
48.5495 125.581 l
54.5209 114.996 l
60.9471 105.495 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 0 1.00000 RG
1.00000 4.30598 390.000 381.388 rc
newpath
389.000 191.228 m
388.268 208.047 l
386.474 222.048 l
383.229 237.057 l
378.715 251.368 l
373.047 264.833 l
366.801 276.646 l
359.383 288.229 l
350.747 299.552 l
341.219 310.208 l
330.514 320.542 l
320.367 329.134 l
308.186 338.240 l
295.199 346.769 l
282.016 354.379 l
269.520 360.733 l
254.072 367.531 l
240.539 372.572 l
224.356 377.500 l
209.706 380.912 l
193.375 383.496 l
177.670 384.694 l
161.239 384.486 l
146.223 382.867 l
130.234 379.482 l
114.008 374.079 l
100.332 367.777 l
86.1666 359.310 l
72.3362 348.820 l
59.7349 336.964 l
48.5349 324.156 l
37.3625 308.634 l
28.5447 293.760 l
20.4766 277.184 l
14.4076 261.777 l
9.14833 244.758 l
5.51682 228.783 l
3.07463 212.312 l
2.00000 196.584 l
2.22747 180.637 l
3.70904 165.865 l
6.45297 151.407 l
10.3462 137.742 l
14.9043 125.783 l
21.2256 112.770 l
27.8221 101.742 l
35.7839 90.5967 l
44.2548 80.5011 l
54.5809 69.9256 l
64.2612 61.2969 l
76.0290 52.0963 l
87.4318 44.2708 l
100.592 36.3500 l
112.479 30.0881 l
126.563 23.6605 l
140.658 18.2381 l
155.156 13.6830 l
169.937 10.1075 l
184.374 7.68457 l
200.146 6.30596 l
215.234 6.31250 l
231.050 7.83334 l
245.197 10.6382 l
260.511 15.3900 l
274.727 21.6036 l
288.333 29.4164 l
301.789 39.2415 l
313.380 49.6996 l
324.343 61.6735 l
335.267 76.1729 l
344.001 90.2414 l
351.727 105.322 l
358.284 121.137 l
363.129 135.899 l
367.035 151.674 l
369.631 167.195 l
371.017 183.482 l
371.073 197.473 l
369.818 213.073 l
367.517 226.590 l
364.194 239.407 l
359.510 252.555 l
353.706 265.093 l
347.513 275.930 l
340.034 286.858 l
331.885 296.960 l
322.155 307.297 l
313.024 315.732 l
301.771 324.836 l
290.494 332.814 l
278.705 340.135 l
266.336 346.848 l
253.187 353.010 l
238.727 358.710 l
225.063 363.099 l
211.263 366.556 l
196.250 369.181 l
181.099 370.580 l
167.444 370.697 l
151.320 369.325 l
137.977 366.837 l
122.676 362.305 l
108.517 356.312 l
96.3549 349.586 l
83.3426 340.517 l
71.0835 329.872 l
59.8412 317.907 l
50.3672 305.751 l
41.6003 292.269 l
33.7187 277.582 l
27.1149 262.416 l
21.6631 246.503 l
18.0017 232.402 l
15.1585 216.612 l
13.6518 201.010 l
13.4523 186.340 l
14.3075 173.408 l
16.5655 158.585 l
19.4937 146.538 l
24.0212 133.136 l
28.9901 121.831 l
35.4301 110.028 l
42.4761 99.3651 l
50.7284 88.8270 l
59.0738 79.6702 l
68.8532 70.3475 l
79.8152 61.2759 l
89.9823 53.8979 l
101.570 46.4946 l
114.154 39.5000 l
127.010 33.3522 l
139.907 28.1210 l
154.679 23.2280 l
168.288 19.7444 l
183.083 17.0868 l
196.645 15.7226 l
211.542 15.4744 l
225.526 16.5211 l
239.997 19.0287 l
253.883 22.9411 l
268.013 28.6230 l
281.099 35.6305 l
293.822 44.3139 l
305.658 54.3572 l
315.750 64.7367 l
326.288 77.8235 l
334.702 90.4342 l
342.550 104.620 l
348.927 118.716 l
354.668 134.731 l
358.481 148.727 l
361.504 164.567 l
363.059 178.818 l
363.473 194.069 l
362.776 206.860 l
360.830 220.943 l
357.827 234.007 l
353.769 246.505 l
348.722 258.390 l
342.972 269.272 l
335.813 280.451 l
328.122 290.545 l
319.164 300.587 l
310.331 309.165 l
299.819 318.074 l
289.056 326.034 l
277.691 333.391 l
265.204 340.415 l
253.195 346.241 l
240.448 351.509 l
225.918 356.421 l
212.421 359.959 l
198.362 362.587 l
183.888 364.125 l
170.513 364.440 l
156.279 363.522 l
142.283 361.253 l
127.584 357.255 l
114.958 352.345 l
100.930 345.064 l
88.8886 337.041 l
77.6595 327.817 l
66.4583 316.585 l
56.2304 304.100 l
47.8923 291.852 l
40.1156 278.109 l
33.6481 264.156 l
27.9302 248.649 l
24.0872 235.081 l
20.9445 219.507 l
19.2222 205.029 l
18.6751 190.965 l
19.2557 177.260 l
20.9761 163.733 l
23.9991 149.952 l
27.8122 137.850 l
32.5111 126.421 l
38.5146 114.777 l
45.4658 103.747 l
52.8540 93.8824 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
q
1.00000 w
newpath
2.00000 191.228 m
389.000 191.228 l
S
Q
1.00000 w
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
285 215 8 18 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
24.1662 191.228 m
24.1662 195.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
19 204 9 16 rc
newpath
31.4531 212.890 m
21.5468 212.890 l
21.5468 212.109 l
31.4531 212.109 l
31.4531 212.890 l
h
f
Q
newpath
31.1718 217.000 m
31.1718 216.281 l
31.5885 215.062 32.2395 214.041 33.1250 213.218  c
33.9062 212.500 l
34.8020 211.656 35.3984 210.987 35.6953 210.492  c
35.9921 209.997 36.1406 209.432 36.1406 208.796  c
36.1406 208.057 35.9583 207.463 35.5937 207.015  c
35.2291 206.567 34.7500 206.343 34.1562 206.343  c
33.4895 206.343 32.9270 206.526 32.4687 206.890  c
32.3020 207.026 32.1927 207.510 32.1406 208.343  c
32.1406 208.515 l
31.4062 208.515 l
31.4062 206.546 l
32.4583 206.099 33.4322 205.875 34.3281 205.875  c
35.3072 205.875 36.1093 206.151 36.7343 206.703  c
37.3593 207.255 37.6718 207.953 37.6718 208.796  c
37.6718 209.942 36.9635 211.000 35.5468 211.968  c
34.6718 212.578 l
33.2656 213.546 32.4947 214.599 32.3593 215.734  c
37.6250 215.734 l
37.6250 217.000 l
31.1718 217.000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
107.083 191.228 m
107.083 195.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
102 204 9 16 rc
newpath
114.453 212.890 m
104.546 212.890 l
104.546 212.109 l
114.453 212.109 l
114.453 212.890 l
h
f
Q
newpath
118.281 206.062 m
118.281 215.109 l
118.328 215.828 l
118.349 216.119 118.434 216.309 118.585 216.398  c
118.737 216.487 119.046 216.531 119.515 216.531  c
120.375 216.546 l
120.375 217.000 l
114.765 217.000 l
114.765 216.546 l
115.625 216.531 l
116.083 216.531 116.388 216.487 116.539 216.398  c
116.690 216.309 116.776 216.119 116.796 215.828  c
116.843 215.109 l
116.843 208.375 l
116.796 207.640 l
116.796 207.296 116.697 207.125 116.500 207.125  c
116.354 207.125 116.015 207.171 115.484 207.265  c
114.765 207.390 l
114.765 206.937 l
118.281 206.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 191.228 m
189.999 195.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
187.500 215.265 m
186.385 215.265 185.484 214.747 184.796 213.710  c
184.109 212.674 183.765 211.307 183.765 209.609  c
183.765 207.869 184.109 206.481 184.796 205.445  c
185.484 204.408 186.406 203.890 187.562 203.890  c
188.718 203.890 189.640 204.406 190.328 205.437  c
191.015 206.468 191.359 207.854 191.359 209.593  c
191.359 211.333 191.013 212.713 190.320 213.734  c
189.627 214.755 188.687 215.265 187.500 215.265  c
h
187.531 214.812 m
189.062 214.885 189.828 213.114 189.828 209.500  c
189.828 206.052 189.072 204.328 187.562 204.328  c
186.062 204.328 185.312 206.078 185.312 209.578  c
185.312 213.005 186.052 214.750 187.531 214.812  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
272.916 191.228 m
272.916 195.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
278.281 206.062 m
278.281 215.109 l
278.328 215.828 l
278.349 216.119 278.434 216.309 278.585 216.398  c
278.737 216.487 279.046 216.531 279.515 216.531  c
280.375 216.546 l
280.375 217.000 l
274.765 217.000 l
274.765 216.546 l
275.625 216.531 l
276.083 216.531 276.388 216.487 276.539 216.398  c
276.690 216.309 276.776 216.119 276.796 215.828  c
276.843 215.109 l
276.843 208.375 l
276.796 207.640 l
276.796 207.296 276.697 207.125 276.500 207.125  c
276.354 207.125 276.015 207.171 275.484 207.265  c
274.765 207.390 l
274.765 206.937 l
278.281 206.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
355.833 191.228 m
355.833 195.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
357.171 217.000 m
357.171 216.281 l
357.588 215.062 358.239 214.041 359.125 213.218  c
359.906 212.500 l
360.802 211.656 361.398 210.987 361.695 210.492  c
361.992 209.997 362.140 209.432 362.140 208.796  c
362.140 208.057 361.958 207.463 361.593 207.015  c
361.229 206.567 360.750 206.343 360.156 206.343  c
359.489 206.343 358.927 206.526 358.468 206.890  c
358.302 207.026 358.192 207.510 358.140 208.343  c
358.140 208.515 l
357.406 208.515 l
357.406 206.546 l
358.458 206.099 359.432 205.875 360.328 205.875  c
361.307 205.875 362.109 206.151 362.734 206.703  c
363.359 207.255 363.671 207.953 363.671 208.796  c
363.671 209.942 362.963 211.000 361.546 211.968  c
360.671 212.578 l
359.265 213.546 358.494 214.599 358.359 215.734  c
363.625 215.734 l
363.625 217.000 l
357.171 217.000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
65.6246 191.228 m
65.6246 193.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
148.541 191.228 m
148.541 193.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
231.458 191.228 m
231.458 193.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
314.374 191.228 m
314.374 193.228 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.50000 w
q
1.00000 w
newpath
189.999 384.694 m
189.999 6.30596 l
S
Q
1.00000 w
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
150 89 8 18 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
189.999 357.051 m
185.999 357.051 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
167 355 9 16 rc
newpath
179.453 363.890 m
169.546 363.890 l
169.546 363.109 l
179.453 363.109 l
179.453 363.890 l
h
f
Q
newpath
179.171 368.000 m
179.171 367.281 l
179.588 366.062 180.239 365.041 181.125 364.218  c
181.906 363.500 l
182.802 362.656 183.398 361.987 183.695 361.492  c
183.992 360.997 184.140 360.432 184.140 359.796  c
184.140 359.057 183.958 358.463 183.593 358.015  c
183.229 357.567 182.750 357.343 182.156 357.343  c
181.489 357.343 180.927 357.526 180.468 357.890  c
180.302 358.026 180.192 358.510 180.140 359.343  c
180.140 359.515 l
179.406 359.515 l
179.406 357.546 l
180.458 357.099 181.432 356.875 182.328 356.875  c
183.307 356.875 184.109 357.151 184.734 357.703  c
185.359 358.255 185.671 358.953 185.671 359.796  c
185.671 360.942 184.963 362.000 183.546 362.968  c
182.671 363.578 l
181.265 364.546 180.494 365.599 180.359 366.734  c
185.625 366.734 l
185.625 368.000 l
179.171 368.000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 274.140 m
185.999 274.140 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
167 272 9 16 rc
newpath
179.453 280.890 m
169.546 280.890 l
169.546 280.109 l
179.453 280.109 l
179.453 280.890 l
h
f
Q
newpath
183.281 274.062 m
183.281 283.109 l
183.328 283.828 l
183.349 284.119 183.434 284.309 183.585 284.398  c
183.737 284.487 184.046 284.531 184.515 284.531  c
185.375 284.546 l
185.375 285.000 l
179.765 285.000 l
179.765 284.546 l
180.625 284.531 l
181.083 284.531 181.388 284.487 181.539 284.398  c
181.690 284.309 181.776 284.119 181.796 283.828  c
181.843 283.109 l
181.843 276.375 l
181.796 275.640 l
181.796 275.296 181.697 275.125 181.500 275.125  c
181.354 275.125 181.015 275.171 180.484 275.265  c
179.765 275.390 l
179.765 274.937 l
183.281 274.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 191.228 m
185.999 191.228 l
S
Q
q
0 w
newpath
189.999 108.316 m
185.999 108.316 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
183.281 108.062 m
183.281 117.109 l
183.328 117.828 l
183.349 118.119 183.434 118.309 183.585 118.398  c
183.737 118.487 184.046 118.531 184.515 118.531  c
185.375 118.546 l
185.375 119.000 l
179.765 119.000 l
179.765 118.546 l
180.625 118.531 l
181.083 118.531 181.388 118.487 181.539 118.398  c
181.690 118.309 181.776 118.119 181.796 117.828  c
181.843 117.109 l
181.843 110.375 l
181.796 109.640 l
181.796 109.296 181.697 109.125 181.500 109.125  c
181.354 109.125 181.015 109.171 180.484 109.265  c
179.765 109.390 l
179.765 108.937 l
183.281 108.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 25.4042 m
185.999 25.4042 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
179.171 36.0000 m
179.171 35.2812 l
179.588 34.0625 180.239 33.0416 181.125 32.2187  c
181.906 31.5000 l
182.802 30.6562 183.398 29.9869 183.695 29.4921  c
183.992 28.9974 184.140 28.4322 184.140 27.7968  c
184.140 27.0572 183.958 26.4635 183.593 26.0156  c
183.229 25.5677 182.750 25.3437 182.156 25.3437  c
181.489 25.3437 180.927 25.5260 180.468 25.8906  c
180.302 26.0260 180.192 26.5104 180.140 27.3437  c
180.140 27.5156 l
179.406 27.5156 l
179.406 25.5468 l
180.458 25.0989 181.432 24.8750 182.328 24.8750  c
183.307 24.8750 184.109 25.1510 184.734 25.7031  c
185.359 26.2552 185.671 26.9531 185.671 27.7968  c
185.671 28.9427 184.963 30.0000 183.546 30.9687  c
182.671 31.5781 l
181.265 32.5468 180.494 33.5989 180.359 34.7343  c
185.625 34.7343 l
185.625 36.0000 l
179.171 36.0000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 315.595 m
187.999 315.595 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 232.684 m
187.999 232.684 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 149.772 m
187.999 149.772 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
189.999 66.8602 m
187.999 66.8602 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.50000 w
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
